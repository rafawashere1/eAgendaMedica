// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eAgendaMedica.Infra.Orm.Shared;

#nullable disable

namespace eAgendaMedica.Infra.Orm.Migrations
{
    [DbContext(typeof(eAgendaMedicaDbContext))]
    [Migration("20231127013437_Initial-Config")]
    partial class InitialConfig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("eAgendaMedica.Domain.ActivityModule.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDay")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TBActivity", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b74e0df-dc5c-4810-8243-1357237c64ad"),
                            EndDay = new DateTime(2023, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 10, 30, 0, 0),
                            StartDay = new DateTime(2023, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Theme = "primary",
                            Title = "Consulta Geral",
                            Type = 1,
                            UserId = new Guid("e7944276-5214-46c7-2755-08dbede3db7d")
                        },
                        new
                        {
                            Id = new Guid("7c82bf9f-a09a-4c70-9489-6a342dc606d9"),
                            EndDay = new DateTime(2023, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 11, 30, 0, 0),
                            StartDay = new DateTime(2023, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 11, 0, 0, 0),
                            Theme = "primary",
                            Title = "Checkup",
                            Type = 1,
                            UserId = new Guid("e7944276-5214-46c7-2755-08dbede3db7d")
                        },
                        new
                        {
                            Id = new Guid("3fadc39c-2710-4600-a204-fb72df9b252f"),
                            EndDay = new DateTime(2023, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 12, 30, 0, 0),
                            StartDay = new DateTime(2023, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 12, 0, 0, 0),
                            Theme = "primary",
                            Title = "Exame de Sangue",
                            Type = 1,
                            UserId = new Guid("e7944276-5214-46c7-2755-08dbede3db7d")
                        },
                        new
                        {
                            Id = new Guid("758c8c63-1a18-4db3-b3e4-2b4dec8add6a"),
                            EndDay = new DateTime(2023, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 11, 30, 0, 0),
                            StartDay = new DateTime(2023, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 11, 0, 0, 0),
                            Theme = "accent",
                            Title = "Cirurgia Cardíaca",
                            Type = 0,
                            UserId = new Guid("e7944276-5214-46c7-2755-08dbede3db7d")
                        },
                        new
                        {
                            Id = new Guid("b07c1564-2d23-49e2-a7da-e7c5a2327b4a"),
                            EndDay = new DateTime(2023, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 11, 30, 0, 0),
                            StartDay = new DateTime(2023, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new TimeSpan(0, 11, 0, 0, 0),
                            Theme = "warn",
                            Title = "Cirurgia de Emergência",
                            Type = 0,
                            UserId = new Guid("e7944276-5214-46c7-2755-08dbede3db7d")
                        });
                });

            modelBuilder.Entity("eAgendaMedica.Domain.AuthModule.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7944276-5214-46c7-2755-08dbede3db7d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f07bdcf-9ff3-43da-9f8b-5e27808f81ab",
                            Email = "teste@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Teste",
                            NormalizedEmail = "TESTE@GMAIL.COM",
                            NormalizedUserName = "TESTE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEpbfL1sGZGAQmfY11et9nzZ5tdMmLv5uVMiv4xXugJLxfksPyB7aJgai6Yym57vFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQY5DMARMJNDQ7CUQJP3U4O7SYXLNANC",
                            TwoFactorEnabled = false,
                            UserName = "teste@gmail.com"
                        });
                });

            modelBuilder.Entity("eAgendaMedica.Domain.DoctorModule.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CRM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TBDoctor", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f095f41-5503-42a2-8412-8d2bb95c0042"),
                            CRM = "04474-RS",
                            Name = "Rafael",
                            UserId = new Guid("e7944276-5214-46c7-2755-08dbede3db7d")
                        },
                        new
                        {
                            Id = new Guid("1cc3bb32-627c-4e79-9f4a-3fbff06bbbdf"),
                            CRM = "23456-SC",
                            Name = "João",
                            UserId = new Guid("e7944276-5214-46c7-2755-08dbede3db7d")
                        },
                        new
                        {
                            Id = new Guid("6275b95e-03e9-4213-9303-f0745608f706"),
                            CRM = "82460-SC",
                            Name = "Rech",
                            UserId = new Guid("e7944276-5214-46c7-2755-08dbede3db7d")
                        },
                        new
                        {
                            Id = new Guid("c20e745a-da4c-4f8f-9f8f-7d5c74cafb6f"),
                            CRM = "61458-SC",
                            Name = "Tiago",
                            UserId = new Guid("e7944276-5214-46c7-2755-08dbede3db7d")
                        },
                        new
                        {
                            Id = new Guid("ad42d17f-9f8d-4f5b-983e-6ad44906b347"),
                            CRM = "02457-SP",
                            Name = "Matheus",
                            UserId = new Guid("e7944276-5214-46c7-2755-08dbede3db7d")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TBDoctor_TBActivity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActivityId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("TBDoctor_TBActivity");

                    b.HasData(
                        new
                        {
                            ActivityId = new Guid("0b74e0df-dc5c-4810-8243-1357237c64ad"),
                            DoctorId = new Guid("6f095f41-5503-42a2-8412-8d2bb95c0042")
                        },
                        new
                        {
                            ActivityId = new Guid("7c82bf9f-a09a-4c70-9489-6a342dc606d9"),
                            DoctorId = new Guid("1cc3bb32-627c-4e79-9f4a-3fbff06bbbdf")
                        },
                        new
                        {
                            ActivityId = new Guid("3fadc39c-2710-4600-a204-fb72df9b252f"),
                            DoctorId = new Guid("6275b95e-03e9-4213-9303-f0745608f706")
                        },
                        new
                        {
                            ActivityId = new Guid("758c8c63-1a18-4db3-b3e4-2b4dec8add6a"),
                            DoctorId = new Guid("c20e745a-da4c-4f8f-9f8f-7d5c74cafb6f")
                        },
                        new
                        {
                            ActivityId = new Guid("b07c1564-2d23-49e2-a7da-e7c5a2327b4a"),
                            DoctorId = new Guid("ad42d17f-9f8d-4f5b-983e-6ad44906b347")
                        });
                });

            modelBuilder.Entity("eAgendaMedica.Domain.ActivityModule.Activity", b =>
                {
                    b.HasOne("eAgendaMedica.Domain.AuthModule.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eAgendaMedica.Domain.DoctorModule.Doctor", b =>
                {
                    b.HasOne("eAgendaMedica.Domain.AuthModule.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("eAgendaMedica.Domain.AuthModule.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("eAgendaMedica.Domain.AuthModule.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eAgendaMedica.Domain.AuthModule.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("eAgendaMedica.Domain.AuthModule.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TBDoctor_TBActivity", b =>
                {
                    b.HasOne("eAgendaMedica.Domain.ActivityModule.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eAgendaMedica.Domain.DoctorModule.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
